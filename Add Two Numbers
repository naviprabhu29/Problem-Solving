You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* newNode(int data ){
       ListNode* newnode = new ListNode();
        newnode->val=data;
        newnode->next=NULL;
        return newnode;
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int bal=0;
        ListNode* ptr1=l1, *ptr2=l2,*head=NULL , *ptr , *prev=NULL;
        
        while(ptr1!=NULL && ptr2!=NULL)
        {
            int data = ptr1->val + ptr2->val + bal;
            
            if(data<=9){
                bal=0;
                ptr=newNode(data);
                
                if(head==NULL){
                    head=ptr;
                    prev=head;
                }
                else{
                    prev->next=ptr;
                    prev=ptr;
                }
                
            }
            else {
                bal=1;
                data=data%10;
                ptr=newNode(data);
                if(head==NULL){
                    head=ptr;
                    prev=ptr;
                }
                else{
                    prev->next=ptr;
                    prev=ptr;
                }
            }
            ptr1=ptr1->next;
                ptr2=ptr2->next;
        }
        
        
        while(ptr1==NULL && ptr2!=NULL)
        {
            int data =  ptr2->val + bal;
               if(data<=9){
                bal=0;
                ptr=newNode(data);
                 prev->next=ptr;
                 prev=ptr;
              
            }
            else {
                bal=1;
                data=data%10;
                ptr=newNode(data);
                prev->next=ptr;
                prev=ptr;
               }
            ptr2=ptr2->next;
        }
        while(ptr2==NULL && ptr1!=NULL)
            {
                int data =  ptr1->val + bal;
                if(data<=9){
                bal=0;
                ptr=newNode(data);
                prev->next=ptr;
                prev=ptr;
            }
              else {
                bal=1;
                data=data%10;
                ptr=newNode(data);
                prev->next=ptr;
                prev=ptr;
               }
            ptr1=ptr1->next;
       
        }
        if(bal)
        {
              ptr=newNode(bal);
                prev->next=ptr;
                prev=ptr;
        }
        
        
        
    return head;}
};

class Solution
{
public:
    ListNode *addTwoNumbers(ListNode *a, ListNode *b)
    {
        int carry = 0;
        ListNode *res = new ListNode(0);
        ListNode *ans = res;

        while (a || b)
        {
            int x = a ? a->val : 0;
            int y = b ? b->val : 0;

            int sum = x + y + carry;
            carry = sum / 10;
            sum = sum % 10;
            ans->next = new ListNode(sum);

            ans = ans->next;

            if (a)
                a = a->next;
            if (b)
                b = b->next;
        }

        if (carry > 0)
        {
            ans->next = new ListNode(carry);
        }

        return res->next;
    }
};
